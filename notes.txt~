\subsection{Analysis of community structure}

The ToS;DR platform provides a case study of how legalese text can be parsed through a social machine. The system receives an input of 'raw legalese', analyses its parts in terms of 'good' and 'bad', and outputs an overall scores. An interesting aspect of this process is the community structure and the way information flows within it. In order to explore this we used the Girvan and Newman (GN) algorithm for identifying communities in complex networks \cite{gnm:comm}. We ran the same analysis on the data before and after the introduction of the ToSBACK crawler to see if this change in the system correlated with a difference in structure.

\subsubsection{Girvan and Newman Algorithm}

Let $G$ be a simple weighted graph  with edge and vertex sets $E(G)$ and $V(G)$  respectively.  The importance of an individual edge $e_{ij} \in E(G)$ is commonly calculated in terms of \emph{edge betweenness centrality} which is defined as follows:
\[\beta(e_{ij}) = \sum_{ u\neq v \in V(G)} \frac{\sigma_{uv}(e_{ij})}{\sigma_{uv}}\]
where $\sigma_{uv}$ is the number of shortest paths from vertex $u$ to $v$ and $\sigma_{uv}(e_{ij})$ is the number of those shortest paths that pass through edge $e_{ij}$.  

In general an edge with high edge betweeness centrality sits between two highly connected areas.  For example, the much ballyhooed \emph{weak ties} in a social network have high edge betweeness centrality.

In order to determine community structure we will apply the Girvan and Newman (GN) algorithm \cite{gnm:comm} which associates a binary, rooted tree, $T$, with a simple weighted graph $G$ as follows: 
\begin{itemize}
\item[(i)] The root of $T$ is assigned to be the whole graph $G$.
 \item[(ii)] Determine the edge, $e_{ij}$, with the highest betweeness centrality in $G$.
 \item[(iii)] Remove edge $e_{ij}$ from $G$ to form  a new graph $G'$
 \item[(iv)] If $G'$ ``splits'' the graph i.e. the number of connected components increases to two then add two children to the root vertex of $T$ (these child vertices correspond to the connected components of $G$).
 \item[(v)] This procedure is iterated until there are no remaining edges in $E(G)$.
\end{itemize}

It has been shown \cite{gnm:comm} that the degree of cohesion in a network can be detected via the GN algorithm and it has been used to identify communities in structures as diverse as scientific collaboration networks, food webs and e-mail networks   \cite{gnm:comm,guimera:comm}.

\subsubsection{Method}

We built two graphs $G_{1}$ and $G_2$ corresponding to the mailing list archive before and after the ToSBack bot began contributing. The vertex set of both graphs are made up of contributors to the mailing list. An edge was placed between two vertices if the relevant contributors responded, or were responded to by another contributor. These edges were then weighted by the number of interactions between the relevant contributors. Finally we applied the GN algorithm to both graphs.


\subsubsection{Results}

The tree, $T_1$, built via the GN algorithm from the mailing list \emph{prior} to the introduction of the  ToSBack bot corresponds to a nested hierarchy of communities within the ToS;DR mailing list at that time. In particular the vertex labeled 1 in Figure \ref{fig:t1} represents the entire mailing list and every interaction between contributors to that list, whereas the vertices labelled 2 and 17 represent two sub-communities that we will call C2 and C17 respectively. Since 2 is adjacent to 3 and 4 in addition to vertex 1 there also exist sub-communities of C2 that we denote C3 and C4. One can easily deduce from the GN algorithm that leaf vertices (vertices incident to exactly one edge) of $T_1$ corresponds to a single contributor to the mailing list thus C3 is a community of precisely 1 person. On the other hand C4 indicates a much larger community – (C2 without one contributor called V1).


In general a subtree of the tree associated to a network using the GN algorithm that is “close ” to a line indicates a particularly well-connected community since most subcommunities will consist of one actor and a community of everybody else other than that actor. For example, we have highlighted four line-like subtrees in $T_1$. These subtrees can be recognised as the areas of discussion initiated by or frequently involving particular members.

We can formalise the notion of “line-like” subtrees by analysing the \emph{symmetry} of  
a tree.  One can measure how symmetric
a graphical tree is by calculating the number of permutations of the
vertices (of that graph) that preserve adjacent vertices \cite{bela:mgt}. We
call the set of such permutations $\Aut(T)$ - the automorphism group of $T$.  The number of permissible permutations is written as 
$\lvert \Aut(T) \rvert$. In general low $\lvert \Aut(T) \rvert$ coincides with the presence of one or several long line-like subtrees.  We calculated that $\lvert \Aut(T_1)\rvert = 16$ and $\vert \Aut(T_2)\rvert = 128$.  This shows a marked
increase in the cardinality of the automorphism group and
therefore increased symmetry.

\begin{figure}[H]
\includegraphics[width=7.5cm]{graph2}\caption{ The tree, $T_1$, built via the GN algorithm that corresponds to the mailing list prior to the ToSBack bot contributions.}\label{fig:t1}
\end{figure}

We conducted similar analysis for the mailing list after the ToSBack bot contributions began and found that the network structure had changed significantly. Tree $T_2$ has less line-like subtrees and greater symmetry, indicating that there is no participant accounting for a highly disproportionate number of interactions.

\begin{figure}[H]
\includegraphics[width=7.5cm]{graph1}\caption[width=7]{ The tree, $T_2$, built via the GN algorithm that corresponds to the mailing list after the ToSBack bot contributions began. }\label{fig:t2}
\end{figure}


\subsection{Discussion}

We see two distinct community structures before and after the introduction of the ToSBack bot. In particular notice the asymmetry of the very long branch in (highlighted in $T_1$), which represents one particular user's tendency to interact with a disproportionate number of contributors during this period. In contrast, after the introduction of the bot, there is no longer one main information hub and the network is more balanced. The first graph resembles one connected tree where discussion went through one person, while the other is two largely separate trees, indicating two separated communities.

One possible explanation for this is suggested by research into how structures naturally become optimised. Self-similarity and self-replication in natural structures like rivers ensures that these structures develop in an optimal way (for example they satisfy Murray's principle of minimum work \cite{murray:min}). Guimera \emph{et. al.} show that this principle is also true for communities; they tend to self-organise to form an optimal structure \cite{guimera:comm}.

We have seen that one way of measuring self-similarity in a graph is to find the order of the symmetry group or group of automorphisms of that graph. The increasing symmetry discovered in this network may therefore be an indication of self-organisation for more efficient dissemination of information. 

Finally, focusing in on the nodes around the ToSBack `bot' suggests that it may have introduced a different dynamic to the network. One particular user, who had previously made a great number of contributions which were largely ignored by others, began interacting heavily with the bot. In fact, this user accounted for the overwhelming majority of all interactions with the bot (86\%). During this period, the user's importance in the network grew, triggering more reponses than in the previous period (while her total contributions remained stable). A possible explanation for this is that this user found a new role after the bot arrived; she went from being a producer of content, to become a filter between the new content generated by the bot and other (human) participants.

\section{Implications for theory, design and measurement}

Our preliminary classification exercise identified a range of what could be termed `legal social machines'; platforms and communities who create, curate, rate, and annotate legal documents and information in ways that make them more usable by non-experts. They generally feature a relatively constrained set of roles (such as contributions and ratings) and make use of automated systems to cut down on repetitive tasks which might be boring for human participants (such as checking for changes in website policies).

Reflecting on ToS;DR and other legal social machines in depth raises some interesting points of connection with previous work on the theory of social machines. First, as proposed in previous work, social machines should be regarded as `networks of networks' \cite{tinati:htp}, and similarly, as `nested' within each other at different levels of a `polyarchy' \cite{shadbolt:classif}. Our examination of Tos;DR lends weight to both perspectives; our analysis reveals distinct networks of contributors within the larger network, which is itself, in part, nested within the even larger Google Groups network.

Second, ToS;DR and ToSBACK are examples of two pre-existing social machines (both of which consisted of human and machine actors), which became appropriated by each other and amalgamated into a new composite social machine (illustrating at least two distinct `phases' of development \cite{tinati:htp}). In addition, the websites that this composite social machine interacts with (through scraping, annotating and rating), are often themselves instances of social machines (i.e. Facebook or Wikipedia). This emphasises the importance of recognising the extent to which social machines interact with each other in complex ways which might otherwise be overlooked if considered individually \cite{deroure:obs}.

Finally, by applying the GN algorithm to archived interactions between both human and machine actors within a social machine, this paper suggests novel techniques for measuring and analysing several aspects of social machines. This method can reveal a) the efficiency of information flow within the social machine, b) information hubs within it, and c) identify the roles of humans and bots relative to each each other within the system.

Our findings may also suggest recommendations for anyone designing new social machines or attempting to shape existing ones. We found that the introduction of a new technological actor (TosBack) disrupted the overall structure of the network, with workflows changing and human participants re-positioning themselves around it. Designers should therefore be aware that the automation of certain roles can have wide-ranging effects on the overall operation of a social machine.
